name: export-to-gmail
run-name: ${{ github.workflow }} - ${{ github.event.head_commit.message }}

on:
 
  push:
    branches:
      - main
    paths:
      - '.github/workflows/export-to-gmail.yml'
      - 'modules/export-to-gmail/pom.xml'
      - 'modules/export-to-gmail/src/**'
      - 'modules/export-to-gmail-docker/**'

env:
  JAVA_VERSION: 21
  WORKING_DIRECTORY: modules/export-to-gmail
  MAVEN_USERNAME: ${{ github.actor }}
  MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  GITHUB_PACKAGES_URL: https://maven.pkg.github.com/${{ github.repository }}
  VERSION_PREFIX: v1.
  DOCKERFILE_DIRECTORY_PATH: modules/export-to-gmail-docker  
  DOCKER_IMAGE_NAME: proton-mail-export-to-gmail

permissions:
  contents: write
  packages: write
  id-token: write
  actions: write

jobs:

  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: maven
          server-id: github
          server-username: MAVEN_USERNAME
          server-password: MAVEN_PASSWORD

      - name: Build and test with Maven
        run: mvn -B -ntp clean verify --file pom.xml
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: export-to-gmail-test-results
          path: ${{ env.WORKING_DIRECTORY }}/target/surefire-reports

      - name: Publish JAR to GitHub Packages
        if: github.event_name == 'push'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: >-
          mvn -B -ntp deploy -DskipTests --file pom.xml
          -DaltDeploymentRepository=github::${{ env.GITHUB_PACKAGES_URL }}
        working-directory: ${{ env.WORKING_DIRECTORY }}

      - name: Set padded version tag
        id: set_version
        run: |
          PADDED=$(printf "%03d" ${{ github.run_number }})
          echo "target_version=${{ env.VERSION_PREFIX }}$PADDED" >> $GITHUB_OUTPUT        

      - name: Create Release
        if: success() # Only run if previous step succeeded
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_version.outputs.target_version }}
          release_name: "${{ steps.set_version.outputs.target_version }}"
          draft: false                    
          prerelease: false
          body: |
            This release includes the version ${{ steps.set_version.outputs.target_version }}. 

      - name: Upload files to Release
        if: success() # Only run if previous step succeeded
        run: |
          cd modules/export-to-gmail
          ls -al target
          for file in target/*.jar; do
            echo "Uploading $file"
            gh release upload "${{ steps.set_version.outputs.target_version }}" "$file" --clobber
          done
          echo "Uploading ../../README.md"
          gh release upload "${{ steps.set_version.outputs.target_version }}" "../../README.md#README.md" --clobber
          echo "Uploading ../../modules/export-to-gmail-docker/docker-compose.yml"
          gh release upload "${{ steps.set_version.outputs.target_version }}" "../../modules/export-to-gmail-docker/docker-compose.yml#docker-compose.yml" --clobber
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
      - name: List all releases
        if: success() # Only run if previous step succeeded      
        run: |
          gh release list --limit 10 --repo ${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Download JAR files from latest release
        if: success() # Only run if previous step succeeded      
        run: |
          cd ${{ env.DOCKERFILE_DIRECTORY_PATH }}
          pwd          
          ls -al
          echo "Download tag release: "${{ steps.set_version.outputs.target_version }}
          gh release download ${{ steps.set_version.outputs.target_version }} -p '*.jar'        
          ls -al 
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}          

      - name: Log in to GitHub Container Registry
        if: success() # Only run if previous step succeeded            
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        if: success() # Only run if previous step succeeded            
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}
          flavor: |
            latest=false                    

      - name: Build and push Docker image
        if: success() # Only run if previous step succeeded            
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.DOCKERFILE_DIRECTORY_PATH }}
          file: ${{ env.DOCKERFILE_DIRECTORY_PATH }}/Dockerfile-tag
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.DOCKER_IMAGE_NAME }}:${{ steps.set_version.outputs.target_version }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            DOCKER_TAG_VERSION=${{ steps.set_version.outputs.target_version }}
            GITHUB_RUN_NUMBER=${{ github.run_number }}

      - name: Trigger ops-deploy workflow
        if: success()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh workflow run ops-deploy.yml \
            --ref "${{ github.ref_name }}" \
            -f docker_image_name="${{ env.DOCKER_IMAGE_NAME }}" \
            -f docker_tag="${{ steps.set_version.outputs.target_version }}"
